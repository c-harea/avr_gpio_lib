
gpio-lib-test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000900  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064a  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000388  00000000  00000000  00001196  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001520  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a7  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000094  00000000  00000000  0000198f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001a23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  64:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Init_Port_Input>:
	*(GPIO_PORT - 1) &= ~(1 << pin);
}

void Set_Pin(volatile uint8_t* GPIO_PORT, uint8_t pin){
	
	*GPIO_PORT |= (1 << pin);
  6c:	01 97       	sbiw	r24, 0x01	; 1
  6e:	fc 01       	movw	r30, r24
  70:	10 82       	st	Z, r1
  72:	08 95       	ret

00000074 <Set_Port>:
  74:	2f ef       	ldi	r18, 0xFF	; 255
  76:	fc 01       	movw	r30, r24
  78:	20 83       	st	Z, r18
  7a:	08 95       	ret

0000007c <Set_Pin_Output>:
  7c:	fc 01       	movw	r30, r24
  7e:	82 91       	ld	r24, -Z
  80:	21 e0       	ldi	r18, 0x01	; 1
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	02 c0       	rjmp	.+4      	; 0x8a <Set_Pin_Output+0xe>
  86:	22 0f       	add	r18, r18
  88:	33 1f       	adc	r19, r19
  8a:	6a 95       	dec	r22
  8c:	e2 f7       	brpl	.-8      	; 0x86 <Set_Pin_Output+0xa>
  8e:	28 2b       	or	r18, r24
  90:	20 83       	st	Z, r18
  92:	08 95       	ret

00000094 <Reset_Pin>:
}	

void Reset_Pin(volatile uint8_t* GPIO_PORT, uint8_t pin){
  94:	fc 01       	movw	r30, r24
	
	*GPIO_PORT &= ~(1 << pin);
  96:	90 81       	ld	r25, Z
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <Reset_Pin+0xe>
  9e:	22 0f       	add	r18, r18
  a0:	33 1f       	adc	r19, r19
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <Reset_Pin+0xa>
  a6:	20 95       	com	r18
  a8:	29 23       	and	r18, r25
  aa:	20 83       	st	Z, r18
  ac:	08 95       	ret

000000ae <Toggle_Pin>:
}

void Toggle_Pin(volatile uint8_t* GPIO_PORT, uint8_t pin){
	
	*GPIO_PORT ^= (1 << pin);
  ae:	fc 01       	movw	r30, r24
  b0:	40 81       	ld	r20, Z
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <Toggle_Pin+0xe>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <Toggle_Pin+0xa>
  c0:	24 27       	eor	r18, r20
  c2:	20 83       	st	Z, r18
  c4:	08 95       	ret

000000c6 <main>:
#define F_CPU 16000000L
#include <util/delay.h>

int main(void)
{
    Init_Port_Input(&PORTA);
  c6:	8b e3       	ldi	r24, 0x3B	; 59
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 36 00 	call	0x6c	; 0x6c <Init_Port_Input>
	Set_Pin_Output(&PORTA, PORTA0);
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	8b e3       	ldi	r24, 0x3B	; 59
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 3e 00 	call	0x7c	; 0x7c <Set_Pin_Output>
	
	Set_Port(&PORTA);
  d8:	8b e3       	ldi	r24, 0x3B	; 59
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 3a 00 	call	0x74	; 0x74 <Set_Port>
	Reset_Pin(&PORTA, PORTA0);
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	8b e3       	ldi	r24, 0x3B	; 59
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 4a 00 	call	0x94	; 0x94 <Reset_Pin>
	
	
    while (1) 
    {
		Toggle_Pin(&PORTA, PORTA0);
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	8b e3       	ldi	r24, 0x3B	; 59
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 57 00 	call	0xae	; 0xae <Toggle_Pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	2f ef       	ldi	r18, 0xFF	; 255
  f6:	89 e6       	ldi	r24, 0x69	; 105
  f8:	98 e1       	ldi	r25, 0x18	; 24
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x34>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x3e>
 104:	00 00       	nop
 106:	f1 cf       	rjmp	.-30     	; 0xea <main+0x24>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
